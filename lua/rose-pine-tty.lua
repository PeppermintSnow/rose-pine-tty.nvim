---@class rosepine_tty
--- Ros√© Pine TTY colorscheme (cterm-only)
--- Usage:
---   Load with: require("rose-pine-tty").setup()

local M = {}

M.setup = function(opts)
  opts = opts or {}

  local colors = vim.tbl_extend("force", {
    _nc = 0,
    base = 0,
    surface = 1,
    overlay = 2,
    muted = 3,
    subtle = 4,
    text = 5,
    love = 6,
    gold = 7,
    rose = 8,
    pine = 9,
    foam = 10,
    iris = 11,
    leaf = 12,
    highlight_low = 13,
    highlight_med = 14,
    highlight_high = 15
  }, opts.colors or {})

  vim.opt.termguicolors = false

  local function hi(group, opts)
    local parts = { group }
    if opts.ctermfg then table.insert(parts, "ctermfg=" .. opts.ctermfg) end
    if opts.ctermbg then table.insert(parts, "ctermbg=" .. opts.ctermbg) end
    if opts.cterm then table.insert(parts, "cterm=" .. opts.cterm) end
    vim.cmd("highlight " .. table.concat(parts, " "))
  end

  hi("IndentBlanklineChar", { ctermfg = colors.muted, })
  hi("IndentBlanklineSpaceChar", { ctermfg = colors.muted, })
  hi("IndentBlanklineSpaceCharBlankline", { ctermfg = colors.muted, })
  hi("ColorColumn", { ctermbg = colors.surface, })
  hi("CurSearch", { ctermfg = colors.base, ctermbg = colors.gold, })
  hi("Cursor", { ctermfg = colors.text, ctermbg = colors.highlight_high, })
  hi("CursorColumn", { ctermbg = colors.overlay, })
  hi("CursorLine", { ctermbg = colors.overlay, })
  hi("CursorLineNr", { ctermfg = colors.text, })
  hi("Directory", { ctermfg = colors.foam, })
  hi("FloatTitle", { ctermfg = colors.foam, })
  hi("FoldColumn", { ctermfg = colors.muted, })
  hi("Folded", { ctermfg = colors.text, })
  hi("LineNr", { ctermfg = colors.muted, })
  hi("MatchParen", { ctermfg = colors.pine, ctermbg = colors.pine, })
  hi("ModeMsg", { ctermfg = colors.subtle, })
  hi("MoreMsg", { ctermfg = colors.iris, })
  hi("NonText", { ctermfg = colors.muted, })
  hi("Normal", { ctermfg = colors.text, ctermbg = colors.base, })
  hi("NormalNC", { ctermfg = colors.text, })
  hi("Pmenu", { ctermfg = colors.subtle, })
  hi("PmenuExtra", { ctermfg = colors.muted, })
  hi("PmenuExtraSel", { ctermfg = colors.subtle, ctermbg = colors.overlay, })
  hi("PmenuKind", { ctermfg = colors.foam, })
  hi("PmenuKindSel", { ctermfg = colors.subtle, ctermbg = colors.overlay, })
  hi("PmenuSel", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("PmenuThumb", { ctermbg = colors.muted, })
  hi("Question", { ctermfg = colors.gold, })
  hi("QuickFixLine", { ctermfg = colors.foam, })
  hi("RedrawDebugClear", { ctermfg = colors.base, ctermbg = colors.gold, })
  hi("RedrawDebugComposed", { ctermfg = colors.base, ctermbg = colors.pine, })
  hi("RedrawDebugRecompose", { ctermfg = colors.base, ctermbg = colors.love, })
  hi("Search", { ctermfg = colors.text, ctermbg = colors.gold, })
  hi("SignColumn", { ctermfg = colors.text, })
  hi("SpecialKey", { ctermfg = colors.foam, })
  hi("StatusLine", { ctermfg = colors.subtle, })
  hi("StatusLineNC", { ctermfg = colors.muted, })
  hi("StatusLineTerm", { ctermfg = colors.base, ctermbg = colors.pine, })
  hi("StatusLineTermNC", { ctermfg = colors.base, ctermbg = colors.pine, })
  hi("TabLine", { ctermfg = colors.subtle, })
  hi("TabLineSel", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("Title", { ctermfg = colors.foam, })
  hi("Visual", { ctermbg = colors.iris, })
  hi("WinBar", { ctermfg = colors.subtle, })
  hi("WinBarNC", { ctermfg = colors.muted, })
  hi("Boolean", { ctermfg = colors.rose, })
  hi("Character", { ctermfg = colors.gold, })
  hi("Comment", { ctermfg = colors.subtle, })
  hi("Conditional", { ctermfg = colors.pine, })
  hi("Constant", { ctermfg = colors.gold, })
  hi("Debug", { ctermfg = colors.rose, })
  hi("Define", { ctermfg = colors.iris, })
  hi("Delimiter", { ctermfg = colors.subtle, })
  hi("Error", { ctermfg = colors.love, })
  hi("Exception", { ctermfg = colors.pine, })
  hi("Float", { ctermfg = colors.gold, })
  hi("Function", { ctermfg = colors.rose, })
  hi("Identifier", { ctermfg = colors.text, })
  hi("Include", { ctermfg = colors.pine, })
  hi("Keyword", { ctermfg = colors.pine, })
  hi("Label", { ctermfg = colors.foam, })
  hi("LspCodeLens", { ctermfg = colors.subtle, })
  hi("LspCodeLensSeparator", { ctermfg = colors.muted, })
  hi("LspInlayHint", { ctermfg = colors.muted, ctermbg = colors.muted, })
  hi("LspReferenceRead", { ctermbg = colors.highlight_med, })
  hi("LspReferenceText", { ctermbg = colors.highlight_med, })
  hi("LspReferenceWrite", { ctermbg = colors.highlight_med, })
  hi("Macro", { ctermfg = colors.iris, })
  hi("Number", { ctermfg = colors.gold, })
  hi("Operator", { ctermfg = colors.subtle, })
  hi("PreCondit", { ctermfg = colors.iris, })
  hi("Repeat", { ctermfg = colors.pine, })
  hi("Special", { ctermfg = colors.foam, })
  hi("SpecialComment", { ctermfg = colors.iris, })
  hi("Statement", { ctermfg = colors.pine, })
  hi("StorageClass", { ctermfg = colors.foam, })
  hi("String", { ctermfg = colors.gold, })
  hi("Structure", { ctermfg = colors.foam, })
  hi("Tag", { ctermfg = colors.foam, })
  hi("Todo", { ctermfg = colors.rose, })
  hi("Type", { ctermfg = colors.foam, })
  hi("Underlined", { ctermfg = colors.iris, })
  hi("htmlArg", { ctermfg = colors.iris, })
  hi("htmlEndTag", { ctermfg = colors.subtle, })
  hi("htmlTag", { ctermfg = colors.subtle, })
  hi("htmlTagN", { ctermfg = colors.text, })
  hi("htmlTagName", { ctermfg = colors.foam, })
  hi("markdownDelimiter", { ctermfg = colors.subtle, })
  hi("mkdCode", { ctermfg = colors.foam, })
  hi("mkdCodeDelimiter", { ctermfg = colors.rose, })
  hi("mkdCodeEnd", { ctermfg = colors.foam, })
  hi("mkdCodeStart", { ctermfg = colors.foam, })
  hi("mkdFootnotes", { ctermfg = colors.foam, })
  hi("mkdID", { ctermfg = colors.foam, })
  hi("mkdListItemLine", { ctermfg = colors.text, })
  hi("mkdRule", { ctermfg = colors.subtle, })
  hi("BufferCurrent", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("BufferCurrentIndex", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("BufferCurrentMod", { ctermfg = colors.foam, ctermbg = colors.overlay, })
  hi("BufferCurrentSign", { ctermfg = colors.subtle, ctermbg = colors.overlay, })
  hi("BufferCurrentTarget", { ctermfg = colors.gold, ctermbg = colors.overlay, })
  hi("BufferInactive", { ctermfg = colors.subtle, })
  hi("BufferInactiveIndex", { ctermfg = colors.subtle, })
  hi("BufferInactiveMod", { ctermfg = colors.foam, })
  hi("BufferInactiveSign", { ctermfg = colors.muted, })
  hi("BufferInactiveTarget", { ctermfg = colors.gold, })
  hi("BufferVisible", { ctermfg = colors.subtle, })
  hi("BufferVisibleIndex", { ctermfg = colors.subtle, })
  hi("BufferVisibleMod", { ctermfg = colors.foam, })
  hi("BufferVisibleSign", { ctermfg = colors.muted, })
  hi("BufferVisibleTarget", { ctermfg = colors.gold, })
  hi("ModesCopy", { ctermbg = colors.gold, })
  hi("ModesDelete", { ctermbg = colors.love, })
  hi("ModesFormat", { ctermbg = colors.rose, })
  hi("ModesInsert", { ctermbg = colors.foam, })
  hi("ModesReplace", { ctermbg = colors.pine, })
  hi("ModesVisual", { ctermbg = colors.iris, })
  hi("NvimTreeEmptyFolderName", { ctermfg = colors.muted, })
  hi("NvimTreeFileNew", { ctermfg = colors.foam, })
  hi("NvimTreeFolderIcon", { ctermfg = colors.subtle, })
  hi("NvimTreeFolderName", { ctermfg = colors.foam, })
  hi("NvimTreeImageFile", { ctermfg = colors.text, })
  hi("NvimTreeOpenedFile", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("NvimTreeRootFolder", { ctermfg = colors.foam, })
  hi("NeotestAdapterName", { ctermfg = colors.iris, })
  hi("NeotestBorder", { ctermfg = colors.highlight_med, })
  hi("NeotestDir", { ctermfg = colors.foam, })
  hi("NeotestExpandMarker", { ctermfg = colors.highlight_med, })
  hi("NeotestFailed", { ctermfg = colors.love, })
  hi("NeotestFile", { ctermfg = colors.text, })
  hi("NeotestFocused", { ctermfg = colors.gold, ctermbg = colors.highlight_med, })
  hi("NeotestIndent", { ctermfg = colors.highlight_med, })
  hi("NeotestMarked", { ctermfg = colors.rose, })
  hi("NeotestNamespace", { ctermfg = colors.gold, })
  hi("NeotestPassed", { ctermfg = colors.pine, })
  hi("NeotestRunning", { ctermfg = colors.gold, })
  hi("NeotestWinSelect", { ctermfg = colors.muted, })
  hi("NeotestSkipped", { ctermfg = colors.subtle, })
  hi("NeotestTarget", { ctermfg = colors.love, })
  hi("NeotestTest", { ctermfg = colors.gold, })
  hi("NeotestUnknown", { ctermfg = colors.subtle, })
  hi("NeotestWatching", { ctermfg = colors.iris, })
  hi("NeoTreeTabActive", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("NeoTreeTabInactive", { ctermfg = colors.subtle, })
  hi("FlashLabel", { ctermfg = colors.base, ctermbg = colors.love, })
  hi("WhichKey", { ctermfg = colors.iris, })
  hi("WhichKeyDesc", { ctermfg = colors.gold, })
  hi("WhichKeyGroup", { ctermfg = colors.foam, })
  hi("WhichKeyIcon", { ctermfg = colors.pine, })
  hi("WhichKeyIconAzure", { ctermfg = colors.pine, })
  hi("WhichKeyIconBlue", { ctermfg = colors.pine, })
  hi("WhichKeyIconCyan", { ctermfg = colors.foam, })
  hi("WhichKeyIconGreen", { ctermfg = colors.leaf, })
  hi("WhichKeyIconGrey", { ctermfg = colors.subtle, })
  hi("WhichKeyIconOrange", { ctermfg = colors.rose, })
  hi("WhichKeyIconPurple", { ctermfg = colors.iris, })
  hi("WhichKeyIconRed", { ctermfg = colors.love, })
  hi("WhichKeyIconYellow", { ctermfg = colors.gold, })
  hi("WhichKeySeparator", { ctermfg = colors.subtle, })
  hi("WhichKeyValue", { ctermfg = colors.rose, })
  hi("IblIndent", { ctermfg = colors.overlay, })
  hi("IblScope", { ctermfg = colors.foam, })
  hi("IblWhitespace", { ctermfg = colors.overlay, })
  hi("CmpItemAbbr", { ctermfg = colors.subtle, })
  hi("CmpItemAbbrDeprecated", { ctermfg = colors.subtle, })
  hi("CmpItemAbbrMatch", { ctermfg = colors.text, })
  hi("CmpItemAbbrMatchFuzzy", { ctermfg = colors.text, })
  hi("CmpItemKind", { ctermfg = colors.subtle, })
  hi("NeogitDiffContextHighlight", { ctermbg = colors.surface, })
  hi("NeogitFilePath", { ctermfg = colors.foam, })
  hi("VimwikiHR", { ctermfg = colors.subtle, })
  hi("VimwikiHeaderChar", { ctermfg = colors.subtle, })
  hi("VimwikiList", { ctermfg = colors.iris, })
  hi("VimwikiNoExistsLink", { ctermfg = colors.love, })
  hi("NeorgMarkerTitle", { ctermfg = colors.foam, })
  hi("DefinitionCount", { ctermfg = colors.rose, })
  hi("DefinitionIcon", { ctermfg = colors.rose, })
  hi("DefinitionPreviewTitle", { ctermfg = colors.rose, })
  hi("LspSagaAutoPreview", { ctermfg = colors.subtle, })
  hi("LspSagaCodeActionContent", { ctermfg = colors.foam, })
  hi("LspSagaCodeActionTitle", { ctermfg = colors.gold, })
  hi("LspSagaDiagnosticHeader", { ctermfg = colors.foam, })
  hi("LspSagaFinderSelection", { ctermfg = colors.gold, })
  hi("LspSagaRenamePromptPrefix", { ctermfg = colors.love, })
  hi("ReferencesCount", { ctermfg = colors.rose, })
  hi("ReferencesIcon", { ctermfg = colors.rose, })
  hi("SagaShadow", { ctermbg = colors.overlay, })
  hi("TargetWord", { ctermfg = colors.iris, })
  hi("LspSignatureActiveParameter", { ctermbg = colors.overlay, })
  hi("PounceAccept", { ctermfg = colors.love, ctermbg = colors.love, })
  hi("PounceAcceptBest", { ctermfg = colors.gold, ctermbg = colors.gold, })
  hi("HopNextKey", { ctermfg = colors.love, ctermbg = colors.love, })
  hi("HopNextKey1", { ctermfg = colors.foam, ctermbg = colors.foam, })
  hi("HopNextKey2", { ctermfg = colors.pine, ctermbg = colors.pine, })
  hi("HopUnmatched", { ctermfg = colors.muted, })
  hi("TelescopeMatching", { ctermfg = colors.rose, })
  hi("TelescopePromptPrefix", { ctermfg = colors.subtle, })
  hi("TelescopeSelection", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("TelescopeSelectionCaret", { ctermfg = colors.rose, ctermbg = colors.overlay, })
  hi("TelescopeTitle", { ctermfg = colors.foam, })
  hi("FzfLuaBufFlagAlt", { ctermfg = colors.subtle, })
  hi("FzfLuaBufFlagCur", { ctermfg = colors.subtle, })
  hi("FzfLuaCursorLine", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("FzfLuaFilePart", { ctermfg = colors.text, })
  hi("FzfLuaHeaderBind", { ctermfg = colors.rose, })
  hi("FzfLuaHeaderText", { ctermfg = colors.love, })
  hi("NotifyDEBUGTitle", { ctermfg = colors.muted, })
  hi("NotifyTRACETitle", { ctermfg = colors.iris, })
  hi("DapUIBreakpointsCurrentLine", { ctermfg = colors.gold, })
  hi("DapUIBreakpointsDisabledLine", { ctermfg = colors.muted, })
  hi("DapUIBreakpointsPath", { ctermfg = colors.foam, })
  hi("DapUIFrameName", { ctermfg = colors.text, })
  hi("DapUIModifiedValue", { ctermfg = colors.foam, })
  hi("DapUISource", { ctermfg = colors.iris, })
  hi("DapUIThread", { ctermfg = colors.gold, })
  hi("DapUIValue", { ctermfg = colors.text, })
  hi("DapUIVariable", { ctermfg = colors.text, })
  hi("DapUIType", { ctermfg = colors.iris, })
  hi("DapUIWatchesEmpty", { ctermfg = colors.love, })
  hi("DashboardCenter", { ctermfg = colors.gold, })
  hi("DashboardFooter", { ctermfg = colors.iris, })
  hi("DashboardHeader", { ctermfg = colors.pine, })
  hi("DashboardShortcut", { ctermfg = colors.love, })
  hi("NavicIconsArray", { ctermfg = colors.gold, })
  hi("NavicIconsBoolean", { ctermfg = colors.rose, })
  hi("NavicIconsClass", { ctermfg = colors.foam, })
  hi("NavicIconsConstant", { ctermfg = colors.gold, })
  hi("NavicIconsConstructor", { ctermfg = colors.gold, })
  hi("NavicIconsEnum", { ctermfg = colors.gold, })
  hi("NavicIconsEnumMember", { ctermfg = colors.foam, })
  hi("NavicIconsEvent", { ctermfg = colors.gold, })
  hi("NavicIconsField", { ctermfg = colors.foam, })
  hi("NavicIconsFile", { ctermfg = colors.muted, })
  hi("NavicIconsFunction", { ctermfg = colors.pine, })
  hi("NavicIconsInterface", { ctermfg = colors.foam, })
  hi("NavicIconsKey", { ctermfg = colors.iris, })
  hi("NavicIconsKeyword", { ctermfg = colors.pine, })
  hi("NavicIconsMethod", { ctermfg = colors.iris, })
  hi("NavicIconsModule", { ctermfg = colors.rose, })
  hi("NavicIconsNamespace", { ctermfg = colors.muted, })
  hi("NavicIconsNull", { ctermfg = colors.love, })
  hi("NavicIconsNumber", { ctermfg = colors.gold, })
  hi("NavicIconsObject", { ctermfg = colors.gold, })
  hi("NavicIconsOperator", { ctermfg = colors.subtle, })
  hi("NavicIconsPackage", { ctermfg = colors.muted, })
  hi("NavicIconsProperty", { ctermfg = colors.foam, })
  hi("NavicIconsString", { ctermfg = colors.gold, })
  hi("NavicIconsStruct", { ctermfg = colors.foam, })
  hi("NavicIconsTypeParameter", { ctermfg = colors.foam, })
  hi("NavicIconsVariable", { ctermfg = colors.text, })
  hi("NavicSeparator", { ctermfg = colors.subtle, })
  hi("NavicText", { ctermfg = colors.subtle, })
  hi("NoiceCursor", { ctermfg = colors.highlight_high, ctermbg = colors.text, })
  hi("TroubleText", { ctermfg = colors.subtle, })
  hi("TroubleCount", { ctermfg = colors.iris, ctermbg = colors.surface, })
  hi("TroubleNormal", { ctermfg = colors.text, })
  hi("MiniDiffOverContext", { ctermbg = colors.surface, })
  hi("MiniFilesFile", { ctermfg = colors.text, })
  hi("MiniFilesTitleFocused", { ctermfg = colors.rose, })
  hi("MiniHipatternsFixme", { ctermfg = colors.base, })
  hi("MiniHipatternsHack", { ctermfg = colors.base, })
  hi("MiniHipatternsNote", { ctermfg = colors.base, })
  hi("MiniHipatternsTodo", { ctermfg = colors.base, })
  hi("MiniIconsAzure", { ctermfg = colors.foam, })
  hi("MiniIconsBlue", { ctermfg = colors.pine, })
  hi("MiniIconsCyan", { ctermfg = colors.foam, })
  hi("MiniIconsGreen", { ctermfg = colors.leaf, })
  hi("MiniIconsGrey", { ctermfg = colors.subtle, })
  hi("MiniIconsOrange", { ctermfg = colors.rose, })
  hi("MiniIconsPurple", { ctermfg = colors.iris, })
  hi("MiniIconsRed", { ctermfg = colors.love, })
  hi("MiniIconsYellow", { ctermfg = colors.gold, })
  hi("MiniIndentscopeSymbol", { ctermfg = colors.muted, })
  hi("MiniIndentscopeSymbolOff", { ctermfg = colors.gold, })
  hi("MiniJump2dDim", { ctermfg = colors.subtle, })
  hi("MiniJump2dSpot", { ctermfg = colors.gold, })
  hi("MiniJump2dSpotAhead", { ctermfg = colors.foam, ctermbg = colors.surface, })
  hi("MiniJump2dSpotUnique", { ctermfg = colors.rose, })
  hi("MiniPickMatchRanges", { ctermfg = colors.foam, })
  hi("MiniStarterFooter", { ctermfg = colors.subtle, })
  hi("MiniStarterSection", { ctermfg = colors.rose, })
  hi("MiniStatuslineDevinfo", { ctermfg = colors.subtle, ctermbg = colors.overlay, })
  hi("MiniStatuslineFilename", { ctermfg = colors.muted, ctermbg = colors.surface, })
  hi("MiniStatuslineModeCommand", { ctermfg = colors.base, ctermbg = colors.love, })
  hi("MiniStatuslineModeInsert", { ctermfg = colors.base, ctermbg = colors.foam, })
  hi("MiniStatuslineModeNormal", { ctermfg = colors.base, ctermbg = colors.rose, })
  hi("MiniStatuslineModeOther", { ctermfg = colors.base, ctermbg = colors.rose, })
  hi("MiniStatuslineModeReplace", { ctermfg = colors.base, ctermbg = colors.pine, })
  hi("MiniStatuslineModeVisual", { ctermfg = colors.base, ctermbg = colors.iris, })
  hi("MiniTablineCurrent", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("MiniTablineHidden", { ctermfg = colors.subtle, })
  hi("MiniTablineModifiedCurrent", { ctermfg = colors.overlay, ctermbg = colors.text, })
  hi("MiniTablineModifiedHidden", { ctermbg = colors.subtle, })
  hi("MiniTablineModifiedVisible", { ctermbg = colors.text, })
  hi("MiniTablineVisible", { ctermfg = colors.text, })
  hi("MiniTestFail", { ctermfg = colors.love, })
  hi("MiniTestPass", { ctermfg = colors.foam, })
  hi("MiniTrailspace", { ctermbg = colors.love, })
  hi("AlphaButtons", { ctermfg = colors.foam, })
  hi("AlphaFooter", { ctermfg = colors.gold, })
  hi("AlphaHeader", { ctermfg = colors.pine, })
  hi("AlphaShortcut", { ctermfg = colors.rose, })
  hi("CopilotSuggestion", { ctermfg = colors.muted, })
  hi("TreesitterContext", { ctermbg = colors.overlay, })
  hi("TreesitterContextLineNumber", { ctermfg = colors.rose, ctermbg = colors.overlay, })
  hi("RainbowDelimiterBlue", { ctermfg = colors.pine, })
  hi("RainbowDelimiterCyan", { ctermfg = colors.foam, })
  hi("RainbowDelimiterGreen", { ctermfg = colors.leaf, })
  hi("RainbowDelimiterOrange", { ctermfg = colors.rose, })
  hi("RainbowDelimiterRed", { ctermfg = colors.love, })
  hi("RainbowDelimiterViolet", { ctermfg = colors.iris, })
  hi("RainbowDelimiterYellow", { ctermfg = colors.gold, })
  hi("RenderMarkdownBullet", { ctermfg = colors.rose, })
  hi("RenderMarkdownChecked", { ctermfg = colors.foam, })
  hi("RenderMarkdownCode", { ctermbg = colors.overlay, })
  hi("RenderMarkdownCodeInline", { ctermfg = colors.text, ctermbg = colors.overlay, })
  hi("RenderMarkdownDash", { ctermfg = colors.muted, })
  hi("RenderMarkdownQuote", { ctermfg = colors.subtle, })
  hi("RenderMarkdownTableHead", { ctermfg = colors.subtle, })
  hi("RenderMarkdownTableRow", { ctermfg = colors.subtle, })
  hi("RenderMarkdownUnchecked", { ctermfg = colors.subtle, })
  hi("GrugFarHelpHeader", { ctermfg = colors.pine, })
  hi("GrugFarHelpHeaderKey", { ctermfg = colors.gold, })
  hi("GrugFarHelpWinActionKey", { ctermfg = colors.gold, })
  hi("GrugFarHelpWinActionPrefix", { ctermfg = colors.foam, })
  hi("GrugFarHelpWinActionText", { ctermfg = colors.pine, })
  hi("GrugFarInputLabel", { ctermfg = colors.foam, })
  hi("GrugFarResultsActionMessage", { ctermfg = colors.foam, })
  hi("GrugFarResultsHeader", { ctermfg = colors.pine, })
  hi("GrugFarResultsLineNo", { ctermfg = colors.iris, })
  hi("GrugFarResultsPath", { ctermfg = colors.foam, })
  hi("GrugFarResultsStats", { ctermfg = colors.iris, })
  hi("AvanteTitle", { ctermfg = colors.highlight_high, ctermbg = colors.rose, })
  hi("AvanteReversedTitle", { ctermfg = colors.rose, })
  hi("AvanteSubtitle", { ctermfg = colors.highlight_med, ctermbg = colors.foam, })
  hi("AvanteReversedSubtitle", { ctermfg = colors.foam, })
  hi("AvanteThirdTitle", { ctermfg = colors.highlight_med, ctermbg = colors.iris, })
  hi("AvanteReversedThirdTitle", { ctermfg = colors.iris, })
  hi("AvantePromptInput", { ctermfg = colors.text, })
  hi("BlinkCmpDoc", { ctermbg = colors.highlight_low, })
  hi("BlinkCmpDocSeparator", { ctermbg = colors.highlight_low, })
  hi("BlinkCmpDocBorder", { ctermfg = colors.highlight_high, })
  hi("BlinkCmpGhostText", { ctermfg = colors.muted, })
  hi("BlinkCmpLabel", { ctermfg = colors.muted, })
  hi("BlinkCmpLabelDeprecated", { ctermfg = colors.muted, })
  hi("BlinkCmpLabelMatch", { ctermfg = colors.text, })
  hi("BlinkCmpDefault", { ctermfg = colors.highlight_med, })
  hi("BlinkCmpKindText", { ctermfg = colors.pine, })
  hi("BlinkCmpKindMethod", { ctermfg = colors.foam, })
  hi("BlinkCmpKindFunction", { ctermfg = colors.foam, })
  hi("BlinkCmpKindConstructor", { ctermfg = colors.foam, })
  hi("BlinkCmpKindField", { ctermfg = colors.pine, })
  hi("BlinkCmpKindVariable", { ctermfg = colors.rose, })
  hi("BlinkCmpKindClass", { ctermfg = colors.gold, })
  hi("BlinkCmpKindInterface", { ctermfg = colors.gold, })
  hi("BlinkCmpKindModule", { ctermfg = colors.foam, })
  hi("BlinkCmpKindProperty", { ctermfg = colors.foam, })
  hi("BlinkCmpKindUnit", { ctermfg = colors.pine, })
  hi("BlinkCmpKindValue", { ctermfg = colors.love, })
  hi("BlinkCmpKindKeyword", { ctermfg = colors.iris, })
  hi("BlinkCmpKindSnippet", { ctermfg = colors.rose, })
  hi("BlinkCmpKindColor", { ctermfg = colors.love, })
  hi("BlinkCmpKindFile", { ctermfg = colors.foam, })
  hi("BlinkCmpKindReference", { ctermfg = colors.love, })
  hi("BlinkCmpKindFolder", { ctermfg = colors.foam, })
  hi("BlinkCmpKindEnum", { ctermfg = colors.foam, })
  hi("BlinkCmpKindEnumMember", { ctermfg = colors.foam, })
  hi("BlinkCmpKindConstant", { ctermfg = colors.gold, })
  hi("BlinkCmpKindStruct", { ctermfg = colors.foam, })
  hi("BlinkCmpKindEvent", { ctermfg = colors.foam, })
  hi("BlinkCmpKindOperator", { ctermfg = colors.foam, })
  hi("BlinkCmpKindTypeParameter", { ctermfg = colors.iris, })
  hi("BlinkCmpKindCodeium", { ctermfg = colors.foam, })
  hi("BlinkCmpKindCopilot", { ctermfg = colors.foam, })
  hi("BlinkCmpKindSupermaven", { ctermfg = colors.foam, })
  hi("BlinkCmpKindTabNine", { ctermfg = colors.foam, })
  hi("SnacksIndent", { ctermfg = colors.overlay, })
  hi("SnacksIndentChunk", { ctermfg = colors.overlay, })
  hi("SnacksIndentBlank", { ctermfg = colors.overlay, })
  hi("SnacksIndentScope", { ctermfg = colors.foam, })
  hi("SnacksPickerMatch", { ctermfg = colors.rose, })
  hi("Sneak", { ctermfg = colors.base, ctermbg = colors.love, })
  hi("DiffviewPrimary", { ctermfg = colors.pine, })
  hi("DiffviewSecondary", { ctermfg = colors.foam, })
  hi("DiffviewNormal", { ctermfg = colors.text, ctermbg = colors.surface, })
  hi("DiffviewWinSeparator", { ctermfg = colors.text, ctermbg = colors.surface, })
  hi("DiffviewFilePanelTitle", { ctermfg = colors.foam, })
  hi("DiffviewFilePanelCounter", { ctermfg = colors.rose, })
  hi("DiffviewFilePanelRootPath", { ctermfg = colors.foam, })
  hi("DiffviewFilePanelFileName", { ctermfg = colors.text, })
  hi("DiffviewFilePanelSelected", { ctermfg = colors.gold, })
  hi("DiffviewFolderName", { ctermfg = colors.foam, })
  hi("DiffviewFolderSign", { ctermfg = colors.subtle, })
  hi("DiffviewHash", { ctermfg = colors.rose, })
  hi("DiffviewReference", { ctermfg = colors.foam, })
  hi("DiffviewReflogSelector", { ctermfg = colors.rose, })
  hi("FloatBorder", { ctermfg = colors.muted, })
  hi("FloatTitle", { ctermfg = colors.foam, })
  hi("Folded", { ctermfg = colors.text, })
  hi("Normal", { ctermfg = colors.text, })
  hi("NormalNC", { ctermfg = colors.text, })
  hi("Pmenu", { ctermfg = colors.subtle, })
  hi("PmenuKind", { ctermfg = colors.foam, })
  hi("SignColumn", { ctermfg = colors.text, })
  hi("StatusLine", { ctermfg = colors.subtle, })
  hi("StatusLineNC", { ctermfg = colors.muted, })
  hi("TabLine", { ctermfg = colors.subtle, })
  hi("TabLineSel", { ctermfg = colors.text, })
  hi("TelescopeNormal", { ctermfg = colors.subtle, })
  hi("TelescopePromptNormal", { ctermfg = colors.text, })
  hi("TelescopeSelection", { ctermfg = colors.text, })
  hi("TelescopeSelectionCaret", { ctermfg = colors.rose, })
  hi("IblIndent", { ctermfg = colors.overlay, })
  hi("IblScope", { ctermfg = colors.foam, })
  hi("IblWhitespace", { ctermfg = colors.overlay, })
  hi("TreesitterContextLineNumber", { ctermfg = colors.rose, })
  hi("MiniFilesTitleFocused", { ctermfg = colors.rose, })

end

vim.cmd("let g:colors_name =  'rose-pine-tty'")

return M
